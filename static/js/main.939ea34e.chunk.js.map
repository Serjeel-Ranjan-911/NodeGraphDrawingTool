{"version":3,"sources":["Components/Header/Header.module.scss","Components/NodeGraph/NodeGraph.module.scss","Components/Header/Header.js","Components/NodeGraph/InputFormat/InputFormat.js","Components/NodeGraph/NodeGraph.js","App.js","reportWebVitals.js","index.js","Components/NodeGraph/InputFormat/InputFormat.module.scss"],"names":["module","exports","Header","props","ref","topTitle","className","style","head","src","alt","InputFormat","useState","modalToggle","setModalToggle","Link","underline","onClick","Modal","modal","open","Box","box","closeIcon","directed","fullScreen","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","canvas","ctx","network","NodeGraph","canvasRef","useRef","textInput","leftMenu","rightMenu","pos","x","y","graph","nodes","id","label","edges","from","to","arrows","parseInput","input","trim","split","map","i","parseInt","n","isNaN","Error","push","length","a","b","c","setData","setFeedback","err","console","log","message","status","text","feed","document","getElementById","innerHTML","color","options","layout","hierarchical","width","font","size","borderWidth","background","border","highlight","shape","physics","enabled","interaction","multiselect","dragView","dragNodes","resize","window","innerWidth","height","innerHeight","setPosition","e","clientX","clientY","draw","buttons","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","useEffect","current","Network","frame","getContext","addEventListener","fullScreenToggle","el","body","requestMethod","requestFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullScreen","call","display","exitFullscreen","webkitExitFullscreen","msExitFullscreen","href","target","github","Button","button","variant","temp","g1","Math","random","graphinput","value","cols","rows","placeholder","onChange","getNetwork","net","switchButton","FormControlLabel","control","Switch","setOptions","defaultChecked","ToggleButtonGroup","multiToggle","exclusive","ToggleButton","multiToggleButton","App","isMobile","isTablet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kzBACAA,EAAOC,QAAU,CAAC,KAAO,uB,+DCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,UAAY,6BAA6B,OAAS,0BAA0B,YAAc,+BAA+B,kBAAoB,qCAAqC,OAAS,0BAA0B,WAAa,8BAA8B,aAAe,kC,4LCUjTC,EAVA,SAACC,GACZ,OACI,yBAAQC,IAAKD,EAAME,SAAUC,UAAWC,IAAMC,KAA9C,UACI,qBAAKC,IAAI,aAAaC,IAAI,SAC1B,uDACA,mH,mHC+CGC,EA9CK,SAACR,GACjB,MAAsCS,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACI,qCACI,cAACC,EAAA,EAAD,CAAMC,UAAU,QAAQC,QAAS,kBAAMH,GAAgBD,IAAvD,2BAIA,cAACK,EAAA,EAAD,CACIZ,UAAWC,IAAMY,MACjBC,KAAMP,EACN,kBAAgB,oBAChB,mBAAiB,0BAJrB,SAMI,eAACQ,EAAA,EAAD,CAAKf,UAAWC,IAAMe,IAAtB,UACI,iJACA,+FACA,iFACA,sCACA,sIACA,uEACA,yCACA,uBADA,QAEK,uBAFL,MAGG,uBAHH,MAIG,uBAJH,MAKG,uBALH,MAMG,uBANH,MAOG,uBAPH,MAQG,uBARH,MASG,uBATH,MAUG,uBAVH,OAWI,uBAXJ,OAYI,0BAEJ,qGACA,cAAC,IAAD,CACIhB,UAAWC,IAAMgB,UACjBN,QAAS,kBAAMH,GAAgBD,e,SC5BnDW,GAAW,EACXC,GAAa,EAEXC,EAAQC,YAAY,CACtBC,QAAS,CACLC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAElBC,UAAW,CACPJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAKtBE,EAAS,KACTC,EAAM,KACNC,EAAU,KA4SCC,EA1SG,SAACnC,GACf,IAAMoC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBnC,EAAWmC,iBAAO,MAClBE,EAAWF,iBAAO,MAClBG,EAAYH,iBAAO,MAErBI,EAAM,CAAEC,EAAG,EAAGC,EAAG,GACjBC,EAAQ,CACRC,MAAO,CACH,CAAEC,GAAI,EAAGC,MAAO,MAChB,CAAED,GAAI,EAAGC,MAAO,MAChB,CAAED,GAAI,EAAGC,MAAO,OAEpBC,MAAO,CACH,CAAEC,KAAM,EAAGC,GAAI,EAAGH,MAAO,KAAMI,OAAQ,CAAED,IAAI,IAC7C,CAAED,KAAM,EAAGC,GAAI,EAAGH,MAAO,KAAMI,OAAQ,CAAED,IAAI,IAC7C,CAAED,KAAM,EAAGC,GAAI,EAAGH,MAAO,KAAMI,OAAQ,CAAED,IAAI,MAI/CE,EAAa,SAACC,GAChB,IAEI,OADAA,EAAQA,EAAMC,OAAOC,MAAM,OACR,GAAGA,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOC,SAASD,MAArD,mBAAKE,EAAL,UACA,GAAIC,MAAMD,GAAI,MAAME,MAAM,uBAM1B,IADA,IAAIhB,EAAQ,GACHY,EAAI,EAAGA,GAAKE,EAAGF,IACpBZ,EAAMiB,KAAK,CACPhB,GAAIW,EACJV,MAAO,IAAMU,IAMrB,IAFA,IAAIT,EAAQ,GAEHS,EAAI,EAAGA,EAAIJ,EAAMU,OAAQN,IAAK,CACnC,MAAgBJ,EAAMI,GAAGF,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOC,SAASD,MAAxD,mBAAKO,EAAL,KAAQC,EAAR,KAAWC,EAAX,KACA,IAAMF,IAAKC,EAAI,MAAMJ,MAAM,yBAC3B,GAAIG,EAAIL,GAAKM,EAAIN,EAAG,MAAME,MAAM,0BAChCb,EAAMc,KAAK,CACPb,KAAMe,EACNd,GAAIe,EACJlB,MAAOmB,EAAI,GAAKA,EAAI,KACpBf,OAAQ,CAAED,GAAI7B,KAGtBuB,EAAQ,CAAEC,QAAOG,SACjBd,EAAQiC,QAAQvB,GAChBwB,GAAY,EAAM,oBACpB,MAAOC,GACLC,QAAQC,IAAIF,GACZD,GAAY,EAAOC,EAAIG,WAIzBJ,EAAc,SAACK,EAAQC,GACzB,IAAMC,EAAOC,SAASC,eAAe,YACrCF,EAAKG,UAAYJ,EAEbC,EAAKvE,MAAM2E,MADXN,EACmB,UAEA,WAIvBO,EAAU,CACVC,OAAQ,CACJC,cAAc,GAElBlC,MAAO,CACH+B,MAAO,UACPI,MAAO,IACPC,KAAM,CACFL,MAAO,UACPM,KAAM,KAGdxC,MAAO,CACHyC,YAAa,EACbP,MAAO,CACHQ,WAAY,UACZC,OAAQ,UACRC,UAAW,CACPF,WAAY,UACZC,OAAQ,YAGhBJ,KAAM,CACFL,MAAO,UACPM,KAAM,IAEVK,MAAO,UAEXC,QAAS,CACLC,SAAS,GAEbC,YAAa,CACTC,aAAa,EACbC,UAAU,EACVC,WAAW,IAgBnB,SAASC,IACLhE,EAAID,OAAOmD,MAAQe,OAAOC,WAC1BlE,EAAID,OAAOoE,OAASF,OAAOG,YAG/B,SAASC,EAAYC,GACjB9D,EAAIC,EAAI6D,EAAEC,QACV/D,EAAIE,EAAI4D,EAAEE,QAGd,SAASC,EAAKH,GACQ,IAAdA,EAAEI,UAEN1E,EAAI2E,YAEJ3E,EAAI4E,UAAY,EAChB5E,EAAI6E,QAAU,QACd7E,EAAI8E,YAAc,UAElB9E,EAAI+E,OAAOvE,EAAIC,EAAGD,EAAIE,GACtB2D,EAAYC,GACZtE,EAAIgF,OAAOxE,EAAIC,EAAGD,EAAIE,GACtBV,EAAIiF,UAlCRC,qBAAU,YACNnF,EAASI,EAAUgF,QAAQC,QAAQrF,OAAOsF,MAAMtF,QACzCmD,MAAQe,OAAOC,WACtBnE,EAAOoE,OAASF,OAAOC,WACvBlE,EAAMD,EAAOuF,WAAW,MACxBtB,IACAC,OAAOsB,iBAAiB,SAAUvB,GAClCrB,SAAS4C,iBAAiB,YAAad,GACvC9B,SAAS4C,iBAAiB,YAAalB,GACvC1B,SAAS4C,iBAAiB,aAAclB,KACzC,IA2BH,IAAMmB,EAAgB,uCAAG,8BAAAzD,EAAA,yDAChB1C,EADgB,iCAGbA,GAAa,EACToG,EAAK9C,SAAS+C,KACdC,EACAF,EAAGG,mBACHH,EAAGI,yBACHJ,EAAGK,sBACHL,EAAGM,oBATM,SAUPJ,EAAcK,KAAKP,GAVZ,+DAajBxH,EAASkH,QAAQhH,MAAM8H,QAAU,OACjC3F,EAAS6E,QAAQhH,MAAM8H,QAAU,OACjC1F,EAAU4E,QAAQhH,MAAM8H,QAAU,OAfjB,qCAkBb5G,GAAa,GACTsD,SAASuD,eAnBA,kCAoBHvD,SAASuD,iBApBN,oCAqBFvD,SAASwD,qBArBP,kCAsBHxD,SAASwD,uBAtBN,oCAuBFxD,SAASyD,iBAvBP,kCAwBHzD,SAASyD,mBAxBN,mEA4BjBnI,EAASkH,QAAQhH,MAAM8H,QAAU,QACjC3F,EAAS6E,QAAQhH,MAAM8H,QAAU,QACjC1F,EAAU4E,QAAQhH,MAAM8H,QAAU,QA9BjB,iEAAH,qDAkCtB,OACI,qCACI,mBAAGI,KAAK,wCAAwCC,OAAO,SAAvD,SACI,cAAC,IAAD,CAAcpI,UAAWC,IAAMoI,WAEnC,cAAC,IAAD,CAAkBrI,UAAWC,IAAMkB,WAAYR,QAAS2G,IACxD,cAAC,EAAD,CAAQvH,SAAUA,IAElB,uBAAMD,IAAKsC,EAAUpC,UAAWC,IAAMwB,KAAtC,UACI,8BACI,cAAC6G,EAAA,EAAD,CACItI,UAAWC,IAAMsI,OACjBnH,MAAOA,EACPoH,QAAQ,WACR7H,QAAS,WACL,IAAI8H,EAAOC,EAAGnF,SAASoF,KAAKC,SAAWF,EAAG9E,SAASiF,WACnD5F,EAAWwF,GACXtG,EAAU8E,QAAQ6B,MAAQL,GAPlC,4BAaJ,cAAC,EAAD,IAEA,kDACA,0BACI3I,IAAKqC,EACL4G,KAAK,KACLC,KAAK,KACLC,YAAY,4BAKZC,SAAU,SAAC9C,GAAD,OAAOnD,EAAWmD,EAAEgC,OAAOU,UAGzC,mBAAGnG,GAAG,gBAGV,cAAC,IAAD,CACI7C,IAAKmC,EACLQ,MAAOA,EACPoC,QAASA,EACTsE,WAAY,SAACC,GACTrH,EAAUqH,KAIlB,sBAAKtJ,IAAKuC,EAAWrC,UAAWC,IAAMoC,UAAtC,UACI,qBAAKrC,UAAWC,IAAMoJ,aAAtB,SACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIpI,MAAOA,EACPwD,MAAM,UACNsE,SAAU,WACNrE,EAAQa,YAAYG,WAAahB,EAAQa,YAAYG,UACrD9D,EAAQ0H,WAAW5E,MAI/BjC,MAAM,iBAGd,qBAAK5C,UAAWC,IAAMoJ,aAAtB,SACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIpI,MAAOA,EACPwD,MAAM,UACNsE,SAAU,WACNrE,EAAQC,OAAOC,cAAgBF,EAAQC,OAAOC,aAC9ChD,EAAQ0H,WAAW5E,MAI/BjC,MAAM,gBAGd,qBAAK5C,UAAWC,IAAMoJ,aAAtB,SACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIpI,MAAOA,EACPwD,MAAM,UACN8E,gBAAc,EACdR,SAAU,WACNrE,EAAQW,QAAQC,SAAWZ,EAAQW,QAAQC,QAC3C1D,EAAQ0H,WAAW5E,MAI/BjC,MAAM,cAId,eAAC+G,EAAA,EAAD,CACI3J,UAAWC,IAAM2J,YACjBC,WAAS,EACTX,SAAU,SAAC9C,GACPlF,EAA8B,aAAnBkF,EAAEgC,OAAOU,MACpB7F,EAAWd,EAAU8E,QAAQ6B,QALrC,UAQI,cAACgB,EAAA,EAAD,CAAc9J,UAAWC,IAAM8J,kBAAmBjB,MAAM,WAAxD,sBAGA,cAACgB,EAAA,EAAD,CAAc9J,UAAWC,IAAM8J,kBAAmBjB,MAAM,aAAxD,kC,SChTLkB,MAtBf,WAEI,OAAGC,YAAYC,WAEP,qBAAKlK,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UAEA,mBAAGA,UAAU,QAAb,mCACA,qBAAKA,UAAU,aAAaG,IAAI,aAAaC,IAAI,qBAOzD,qBAAKJ,UAAU,MAAf,SAEI,cAAC,EAAD,OCTGmK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrG,SAASC,eAAe,SAM1ByF,K,mBCfAzK,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,IAAM,yBAAyB,UAAY,kC","file":"static/js/main.939ea34e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"Header_head__zcklB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"NodeGraph_main__1G9iO\",\"rightMenu\":\"NodeGraph_rightMenu__3jKBk\",\"button\":\"NodeGraph_button__3ttZV\",\"multiToggle\":\"NodeGraph_multiToggle__v9KXI\",\"multiToggleButton\":\"NodeGraph_multiToggleButton__2jFQH\",\"github\":\"NodeGraph_github__2iFqs\",\"fullScreen\":\"NodeGraph_fullScreen__x3QoX\",\"switchButton\":\"NodeGraph_switchButton__3PcEc\"};","import style from \"./Header.module.scss\";\r\nconst Header = (props) => {\r\n    return (\r\n        <header ref={props.topTitle} className={style.head}>\r\n            <img src=\"./logo.svg\" alt=\"logo\" />\r\n            <h1>Node Graph Visualizer</h1>\r\n            <p>Easily visualize your node graph here! Just give input and interact with graph</p>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from \"react\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport style from \"./InputFormat.module.scss\";\r\n\r\nconst InputFormat = (props) => {\r\n    const [modalToggle, setModalToggle] = useState(false);\r\n    return (\r\n        <>\r\n            <Link underline=\"hover\" onClick={() => setModalToggle(!modalToggle)}>\r\n                Input Format?\r\n            </Link>\r\n\r\n            <Modal\r\n                className={style.modal}\r\n                open={modalToggle}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box className={style.box}>\r\n                    <p>The input format is similar to how many competative programming website give console inputs for graphs and trees</p>\r\n                    <p>First line should be number of nodes(n) and number of edges(m)</p>\r\n                    <p>Rest of the m lines contain info about each edge</p>\r\n                    <p>a b c</p>\r\n                    <p>Above statement implies there is an edge from node a to b with a weight of c where weight is optional</p>\r\n                    <p>Note : currently all nodes are 1-based</p>\r\n                    <p>Example:\r\n                    <br/>  \r\n                    10 10<br/>\r\n                    1 2<br/>\r\n                    2 3<br/>\r\n                    3 4<br/>\r\n                    4 5<br/>\r\n                    5 6<br/>\r\n                    6 7<br/>\r\n                    7 8<br/>\r\n                    8 9<br/>\r\n                    9 10<br/>\r\n                    10 1<br/>\r\n                    </p>\r\n                    <p>This is a graph with 10 nodes and 10 edges connecting them in circle</p>\r\n                    <AiFillCloseCircle\r\n                        className={style.closeIcon}\r\n                        onClick={() => setModalToggle(!modalToggle)}\r\n                    ></AiFillCloseCircle>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InputFormat;\r\n","import style from \"./NodeGraph.module.scss\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport Header from \"../Header/Header.js\";\r\nimport g1 from \"./SampleGraphs/g.json\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { AiFillGithub } from \"react-icons/ai\";\r\nimport { RiFullscreenFill } from \"react-icons/ri\";\r\n\r\nimport InputFormat from \"./InputFormat/InputFormat.js\";\r\n\r\nimport { createTheme } from \"@mui/material/styles\";\r\n\r\nvar directed = false;\r\nvar fullScreen = false;\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: \"#5833ff\",\r\n            main: \"#2200bb\",\r\n            dark: \"#170080\",\r\n            contrastText: \"#fff\",\r\n        },\r\n        secondary: {\r\n            light: \"#ff87ca\",\r\n            main: \"#ff60b8\",\r\n            dark: \"#b80066\",\r\n            contrastText: \"#fff\",\r\n        },\r\n    },\r\n});\r\n\r\nvar canvas = null;\r\nvar ctx = null;\r\nvar network = null;\r\n\r\nconst NodeGraph = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const textInput = useRef(null);\r\n\r\n    const topTitle = useRef(null);\r\n    const leftMenu = useRef(null);\r\n    const rightMenu = useRef(null);\r\n\r\n    var pos = { x: 0, y: 0 };\r\n    var graph = {\r\n        nodes: [\r\n            { id: 1, label: \" 1\" },\r\n            { id: 2, label: \" 2\" },\r\n            { id: 3, label: \" 3\" },\r\n        ],\r\n        edges: [\r\n            { from: 1, to: 2, label: \"10\", arrows: { to: true } },\r\n            { from: 2, to: 3, label: \"20\", arrows: { to: false } },\r\n            { from: 1, to: 3, label: \"30\", arrows: { to: false } },\r\n        ],\r\n    };\r\n\r\n    const parseInput = (input) => {\r\n        try {\r\n            input = input.trim().split(\"\\n\");\r\n            let [n, m] = input[0].split(\" \").map((i) => parseInt(i));\r\n            if (isNaN(n)) throw Error(\"Please Give numbers\");\r\n            // if (m !== input.length - 1)\r\n            //     //check if number of correct edges are given\r\n            //     throw Error(\"Number of edges mismatch\");\r\n\r\n            let nodes = [];\r\n            for (let i = 1; i <= n; i++) {\r\n                nodes.push({\r\n                    id: i,\r\n                    label: \" \" + i,\r\n                });\r\n            }\r\n\r\n            let edges = [];\r\n\r\n            for (let i = 1; i < input.length; i++) {\r\n                let [a, b, c] = input[i].split(\" \").map((i) => parseInt(i));\r\n                if (!(a && b)) throw Error(\"Please give all edges\");\r\n                if (a > n || b > n) throw Error(\"Wrong node value given\");\r\n                edges.push({\r\n                    from: a,\r\n                    to: b,\r\n                    label: c ? \"\" + c : null,\r\n                    arrows: { to: directed },\r\n                });\r\n            }\r\n            graph = { nodes, edges };\r\n            network.setData(graph);\r\n            setFeedback(true, \"Success &#10003;\");\r\n        } catch (err) {\r\n            console.log(err);\r\n            setFeedback(false, err.message);\r\n        }\r\n    };\r\n\r\n    const setFeedback = (status, text) => {\r\n        const feed = document.getElementById(\"feedback\");\r\n        feed.innerHTML = text;\r\n        if (status) {\r\n            feed.style.color = \"#6dff37\";\r\n        } else {\r\n            feed.style.color = \"#ff6565\";\r\n        }\r\n    };\r\n\r\n    let options = {\r\n        layout: {\r\n            hierarchical: false,\r\n        },\r\n        edges: {\r\n            color: \"#3e0080\",\r\n            width: 2.5,\r\n            font: {\r\n                color: \"#ff0866\",\r\n                size: 20,\r\n            },\r\n        },\r\n        nodes: {\r\n            borderWidth: 1,\r\n            color: {\r\n                background: \"#ff0866\",\r\n                border: \"#ff96bf\",\r\n                highlight: {\r\n                    background: \"#ff619d\",\r\n                    border: \"#ff96bf\",\r\n                },\r\n            },\r\n            font: {\r\n                color: \"#f9f0ff\",\r\n                size: 20,\r\n            },\r\n            shape: \"circle\",\r\n        },\r\n        physics: {\r\n            enabled: true,\r\n        },\r\n        interaction: {\r\n            multiselect: false,\r\n            dragView: false,\r\n            dragNodes: true,\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        canvas = canvasRef.current.Network.canvas.frame.canvas;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerWidth;\r\n        ctx = canvas.getContext(\"2d\");\r\n        resize();\r\n        window.addEventListener(\"resize\", resize);\r\n        document.addEventListener(\"mousemove\", draw);\r\n        document.addEventListener(\"mousedown\", setPosition);\r\n        document.addEventListener(\"mouseenter\", setPosition);\r\n    }, []);\r\n\r\n    function resize() {\r\n        ctx.canvas.width = window.innerWidth;\r\n        ctx.canvas.height = window.innerHeight;\r\n    }\r\n\r\n    function setPosition(e) {\r\n        pos.x = e.clientX;\r\n        pos.y = e.clientY;\r\n    }\r\n\r\n    function draw(e) {\r\n        if (e.buttons !== 1) return;\r\n\r\n        ctx.beginPath(); // begin\r\n\r\n        ctx.lineWidth = 3;\r\n        ctx.lineCap = \"round\";\r\n        ctx.strokeStyle = \"#37ed00\";\r\n\r\n        ctx.moveTo(pos.x, pos.y); // from\r\n        setPosition(e);\r\n        ctx.lineTo(pos.x, pos.y); // to\r\n        ctx.stroke(); // draw it!\r\n    }\r\n\r\n    const fullScreenToggle = async () => {\r\n        if (!fullScreen) {\r\n            try {\r\n                fullScreen = true;\r\n                let el = document.body;\r\n                let requestMethod =\r\n                    el.requestFullScreen ||\r\n                    el.webkitRequestFullScreen ||\r\n                    el.mozRequestFullScreen ||\r\n                    el.msRequestFullScreen;\r\n                await requestMethod.call(el);\r\n            } catch (err) {}\r\n\r\n            topTitle.current.style.display = \"none\";\r\n            leftMenu.current.style.display = \"none\";\r\n            rightMenu.current.style.display = \"none\";\r\n        } else {\r\n            try {\r\n                fullScreen = false;\r\n                if (document.exitFullscreen) {\r\n                    await document.exitFullscreen();\r\n                } else if (document.webkitExitFullscreen) {\r\n                    await document.webkitExitFullscreen();\r\n                } else if (document.msExitFullscreen) {\r\n                    await document.msExitFullscreen();\r\n                }\r\n            } catch (err) {}\r\n\r\n            topTitle.current.style.display = \"block\";\r\n            leftMenu.current.style.display = \"block\";\r\n            rightMenu.current.style.display = \"block\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <a href=\"https://github.com/Serjeel-Ranjan-911\" target=\"_blank\">\r\n                <AiFillGithub className={style.github}></AiFillGithub>\r\n            </a>\r\n            <RiFullscreenFill className={style.fullScreen} onClick={fullScreenToggle}></RiFullscreenFill>\r\n            <Header topTitle={topTitle} />\r\n\r\n            <main ref={leftMenu} className={style.main}>\r\n                <div>\r\n                    <Button\r\n                        className={style.button}\r\n                        theme={theme}\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                            let temp = g1[parseInt(Math.random() * g1.length)].graphinput;\r\n                            parseInput(temp);\r\n                            textInput.current.value = temp;\r\n                        }}\r\n                    >\r\n                        Sample Graph\r\n                    </Button>\r\n                </div>\r\n                <InputFormat />\r\n\r\n                <p>Input here &darr;</p>\r\n                <textarea\r\n                    ref={textInput}\r\n                    cols=\"12\"\r\n                    rows=\"15\"\r\n                    placeholder=\"n m\r\n                1 2\r\n                2 3\r\n                3 4 \r\n            \"\r\n                    onChange={(e) => parseInput(e.target.value)}\r\n                ></textarea>\r\n\r\n                <p id=\"feedback\"></p>\r\n            </main>\r\n\r\n            <Graph\r\n                ref={canvasRef}\r\n                graph={graph}\r\n                options={options}\r\n                getNetwork={(net) => {\r\n                    network = net;\r\n                }}\r\n            />\r\n\r\n            <div ref={rightMenu} className={style.rightMenu}>\r\n                <div className={style.switchButton}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                theme={theme}\r\n                                color=\"primary\"\r\n                                onChange={() => {\r\n                                    options.interaction.dragNodes = !options.interaction.dragNodes;\r\n                                    network.setOptions(options);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"Lock Nodes\"\r\n                    />\r\n                </div>\r\n                <div className={style.switchButton}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                theme={theme}\r\n                                color=\"primary\"\r\n                                onChange={() => {\r\n                                    options.layout.hierarchical = !options.layout.hierarchical;\r\n                                    network.setOptions(options);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"Heirarchy\"\r\n                    />\r\n                </div>\r\n                <div className={style.switchButton}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                theme={theme}\r\n                                color=\"primary\"\r\n                                defaultChecked\r\n                                onChange={() => {\r\n                                    options.physics.enabled = !options.physics.enabled;\r\n                                    network.setOptions(options);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"Physics\"\r\n                    />\r\n                </div>\r\n\r\n                <ToggleButtonGroup\r\n                    className={style.multiToggle}\r\n                    exclusive\r\n                    onChange={(e) => {\r\n                        directed = e.target.value === \"directed\";\r\n                        parseInput(textInput.current.value);\r\n                    }}\r\n                >\r\n                    <ToggleButton className={style.multiToggleButton} value=\"directed\">\r\n                        Directed\r\n                    </ToggleButton>\r\n                    <ToggleButton className={style.multiToggleButton} value=\"undirected\">\r\n                        Undirected\r\n                    </ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NodeGraph;\r\n","import \"./App.css\";\nimport NodeGraph from \"./Components/NodeGraph/NodeGraph.js\";\nimport { isMobile, isTablet } from 'react-device-detect';\n\nfunction App() {\n\n    if(isMobile || isTablet){\n        return (\n            <div className=\"App\">\n                <div className=\"Container\">\n\n                <p className=\"title\">Designed for Desktops</p>\n                <img className=\"brokenRobo\" src=\"./robo.png\" alt=\"broken robo\" />\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"App\">\n            \n            <NodeGraph />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"InputFormat_modal__1osdk\",\"box\":\"InputFormat_box__2HvaB\",\"closeIcon\":\"InputFormat_closeIcon__313Kb\"};"],"sourceRoot":""}